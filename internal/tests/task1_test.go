package main

import (
	task1 "dz2/internal/task_1"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestAnimalFeeding(t *testing.T) {
	t.Parallel()
	t.Run("–û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: –≤—Å–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `q--3wer4301-4+r_e**
	   dog d1
	   cat c1
	   cat c2
	   bird b1
	   end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 4)
		assert.Equal(t, "d1 qwe", results[0])
		assert.Equal(t, "c1 0", results[1])
		assert.Equal(t, "c2 1", results[2])
		assert.Equal(t, "b1 -_", results[3])
	})

	t.Run("–ü—É—Å—Ç–∞—è –∫–æ—Ä–º—É—à–∫–∞", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `
	   dog d1
	   cat c1
	   end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 2)
		assert.Equal(t, "d1 ", results[0])
		assert.Equal(t, "c1 ", results[1])
	})

	t.Run("–ù–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `q--3wer4301-4+r_e**
	   end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Empty(t, results)
	})

	t.Run("–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω—ã—Ö", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `abc123!@#
	   cat cat1
	   cat cat2
	   cat cat3
	   end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "cat1 1", results[0])
		assert.Equal(t, "cat2 2", results[1])
		assert.Equal(t, "cat3 3", results[2])
	})
	t.Run("Unicode —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ—Ä–º—É—à–∫–µ", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `–ü—Ä–∏–≤–µ—Ç1234üéâüê±!abc
dog d1
cat c1
bird b1
end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "d1 –ü–≤c", results[0]) // –±—É–∫–≤—ã
		assert.Equal(t, "c1 2", results[1])   // —Ü–∏—Ñ—Ä—ã
		assert.Equal(t, "b1 üê±", results[2])   // —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
	})

	t.Run("–†–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `q--3wer4301-4+r_e**
	   Dog d1
	   CAT c1
	   cAt c2
	   biRD b1
	   end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 4)
		assert.Equal(t, "d1 qwe", results[0])
		assert.Equal(t, "c1 0", results[1])
		assert.Equal(t, "c2 1", results[2])
		assert.Equal(t, "b1 -_", results[3])
	})

	t.Run("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–º–∞", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `

		dog d1
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "d1 ", results[0])
		assert.Equal(t, "c1 ", results[1])
		assert.Equal(t, "b1 ", results[2])
	})

	t.Run("–ú–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –º–∞–ª–æ –∫–æ—Ä–º–∞", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `ab12

		dog d1
		dog d2
		dog d3
		cat c1
		cat c2
		bird b1
		bird b2
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 7)
		// –ö–æ—Ä–º "ab12", –æ—á–µ—Ä–µ–¥—å: d1, d2, d3, c1, c2, b1, b2
		// d1: a (—Å—ä–µ–ª), d2: b (—Å—ä–µ–ª), d3: 1 (–Ω–µ —Å—ä–µ–ª), c1: 2 (—Å—ä–µ–ª)
		assert.Equal(t, "d1 a", results[0])
		assert.Equal(t, "d2 b", results[1])
		assert.Equal(t, "d3 ", results[2])
		assert.Equal(t, "c1 2", results[3])
		assert.Equal(t, "c2 ", results[4])
		assert.Equal(t, "b1 ", results[5])
		assert.Equal(t, "b2 ", results[6])
	})

	t.Run("–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `!@#$%^&*()_+-=

		dog d1
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "d1 ", results[0])     // —Å–æ–±–∞–∫–∞ –Ω–µ –µ—Å—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
		assert.Equal(t, "c1 ", results[1])     // –∫–æ—à–∫–∞ –Ω–µ –µ—Å—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
		assert.Equal(t, "b1 #^(+", results[2]) // –ø—Ç–∏—Ü–∞ —Å—ä–µ–ª–∞ –≤—Å–µ
	})

	t.Run("–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `1234567890

		dog d1
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "d1 ", results[0])
		assert.Equal(t, "c1 258", results[1])
		assert.Equal(t, "b1 ", results[2])
	})

	t.Run("–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `abcABCaBC

		dog d1
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		assert.Equal(t, "d1 aAa", results[0]) // —Å–æ–±–∞–∫–∞ —Å—ä–µ–ª–∞ –≤—Å–µ
		assert.Equal(t, "c1 ", results[1])    // –∫–æ—à–∫–∞ –Ω–µ –µ—Å—Ç –±—É–∫–≤—ã
		assert.Equal(t, "b1 ", results[2])    // –ø—Ç–∏—Ü–∞ –Ω–µ –µ—Å—Ç –±—É–∫–≤—ã
	})

	t.Run("–ü–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É –≤–≤–æ–¥–∞", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `a1b2c3

		bird b1
		cat c1
		dog d1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		// –û—á–µ—Ä–µ–¥—å: b1, c1, d1
		// b1: a (–Ω–µ —Å—ä–µ–ª–∞), c1: 1 (—Å—ä–µ–ª–∞), d1: b (—Å—ä–µ–ª), b1: 2 (–Ω–µ —Å—ä–µ–ª–∞), c1: c (–Ω–µ —Å—ä–µ–ª–∞), d1: 3 (–Ω–µ —Å—ä–µ–ª)
		assert.Equal(t, "b1 ", results[0])
		assert.Equal(t, "c1 1", results[1])
		assert.Equal(t, "d1 b", results[2])
	})

	t.Run("–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `abc123!@#

		dog dog1
		cat cat1
		bird bird1
		dog dog2
		cat cat2
		bird bird2
		dog dog3
		cat cat3
		bird bird3
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 9)
		// –û—á–µ—Ä–µ–¥—å: dog1, cat1, bird1, dog2, cat2, bird2, dog3, cat3, bird3
		// dog1: a, cat1: 1, bird1: !, dog2: b, cat2: 2, bird2: @, dog3: c, cat3: 3, bird3: #
		assert.Equal(t, "dog1 a", results[0])
		assert.Equal(t, "cat1 ", results[1])
		assert.Equal(t, "bird1 ", results[2])
		assert.Equal(t, "dog2 ", results[3])
		assert.Equal(t, "cat2 2", results[4])
		assert.Equal(t, "bird2 ", results[5])
		assert.Equal(t, "dog3 ", results[6])
		assert.Equal(t, "cat3 ", results[7])
		assert.Equal(t, "bird3 #", results[8])
	})

	t.Run("–û–¥–∏–Ω —Å–∏–º–≤–æ–ª –∫–æ—Ä–º–∞", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `a

		dog d1
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		// d1: a (—Å—ä–µ–ª), c1: -, b1: -
		assert.Equal(t, "d1 a", results[0])
		assert.Equal(t, "c1 ", results[1])
		assert.Equal(t, "b1 ", results[2])
	})

	t.Run("–û–¥–∏–Ω —Å–∏–º–≤–æ–ª –∫–æ—Ä–º–∞, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å—å–µ–ª", func(t *testing.T) {
		t.Parallel()
		// Given
		input := `a

		cat c0
		cat c1
		bird b1
		end`

		// When
		results := task1.AnimalFeeding(strings.NewReader(input))

		// Then
		require.Len(t, results, 3)
		// d1: a (—Å—ä–µ–ª), c1: -, b1: -
		assert.Equal(t, "c0 ", results[0])
		assert.Equal(t, "c1 ", results[1])
		assert.Equal(t, "b1 ", results[2])
	})

}
